/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DeFiLendingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "MIN_COLLATERAL_RATIO"
      | "WEEKLY_INTEREST_RATE"
      | "addCollateral"
      | "collateralToken"
      | "drawLoan"
      | "fetchPosition"
      | "loanToken"
      | "owner"
      | "recoverERC20"
      | "removeCollateral"
      | "renounceOwnership"
      | "repayDebt"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollateralAdded"
      | "CollateralRemoved"
      | "DebtRepaid"
      | "LoanDrawn"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_COLLATERAL_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEEKLY_INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPosition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "loanToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repayDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_COLLATERAL_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEEKLY_INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CollateralAddedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralRemovedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebtRepaidEvent {
  export type InputTuple = [
    user: AddressLike,
    principal: BigNumberish,
    interest: BigNumberish
  ];
  export type OutputTuple = [user: string, principal: bigint, interest: bigint];
  export interface OutputObject {
    user: string;
    principal: bigint;
    interest: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanDrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DeFiLending extends BaseContract {
  connect(runner?: ContractRunner | null): DeFiLending;
  waitForDeployment(): Promise<this>;

  interface: DeFiLendingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  MIN_COLLATERAL_RATIO: TypedContractMethod<[], [bigint], "view">;

  WEEKLY_INTEREST_RATE: TypedContractMethod<[], [bigint], "view">;

  addCollateral: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  collateralToken: TypedContractMethod<[], [string], "view">;

  drawLoan: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  fetchPosition: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collateral: bigint;
        debt: bigint;
        interest: bigint;
      }
    ],
    "view"
  >;

  loanToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recoverERC20: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeCollateral: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repayDebt: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_COLLATERAL_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEKLY_INTEREST_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addCollateral"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collateralToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "drawLoan"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fetchPosition"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collateral: bigint;
        debt: bigint;
        interest: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "loanToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeCollateral"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayDebt"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CollateralAdded"
  ): TypedContractEvent<
    CollateralAddedEvent.InputTuple,
    CollateralAddedEvent.OutputTuple,
    CollateralAddedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralRemoved"
  ): TypedContractEvent<
    CollateralRemovedEvent.InputTuple,
    CollateralRemovedEvent.OutputTuple,
    CollateralRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DebtRepaid"
  ): TypedContractEvent<
    DebtRepaidEvent.InputTuple,
    DebtRepaidEvent.OutputTuple,
    DebtRepaidEvent.OutputObject
  >;
  getEvent(
    key: "LoanDrawn"
  ): TypedContractEvent<
    LoanDrawnEvent.InputTuple,
    LoanDrawnEvent.OutputTuple,
    LoanDrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CollateralAdded(address,uint256)": TypedContractEvent<
      CollateralAddedEvent.InputTuple,
      CollateralAddedEvent.OutputTuple,
      CollateralAddedEvent.OutputObject
    >;
    CollateralAdded: TypedContractEvent<
      CollateralAddedEvent.InputTuple,
      CollateralAddedEvent.OutputTuple,
      CollateralAddedEvent.OutputObject
    >;

    "CollateralRemoved(address,uint256)": TypedContractEvent<
      CollateralRemovedEvent.InputTuple,
      CollateralRemovedEvent.OutputTuple,
      CollateralRemovedEvent.OutputObject
    >;
    CollateralRemoved: TypedContractEvent<
      CollateralRemovedEvent.InputTuple,
      CollateralRemovedEvent.OutputTuple,
      CollateralRemovedEvent.OutputObject
    >;

    "DebtRepaid(address,uint256,uint256)": TypedContractEvent<
      DebtRepaidEvent.InputTuple,
      DebtRepaidEvent.OutputTuple,
      DebtRepaidEvent.OutputObject
    >;
    DebtRepaid: TypedContractEvent<
      DebtRepaidEvent.InputTuple,
      DebtRepaidEvent.OutputTuple,
      DebtRepaidEvent.OutputObject
    >;

    "LoanDrawn(address,uint256)": TypedContractEvent<
      LoanDrawnEvent.InputTuple,
      LoanDrawnEvent.OutputTuple,
      LoanDrawnEvent.OutputObject
    >;
    LoanDrawn: TypedContractEvent<
      LoanDrawnEvent.InputTuple,
      LoanDrawnEvent.OutputTuple,
      LoanDrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
